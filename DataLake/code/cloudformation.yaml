AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Template for Serverless Data Analytics.'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
Resources:
  IAMUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
      - PolicyName: "ServiceAccessRole"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Action: "firehose:*"
            Effect: "Allow"
            Resource: "*"
          - Action: "logs:*"
            Effect: "Allow"
            Resource: "*"
          - Action: "cloudwatch:*"
            Effect: "Allow"
            Resource: "*"
      UserName: analytics-user
  IAMUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref IAMUser
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SecurityGroups: [!Ref 'EC2SecurityGroup']
      IamInstanceProfile: !Ref 'EC2Profile'
      KeyName: !Ref 'KeyName'
      ImageId: ami-1853ac65
      Tags:
      - Key: Name
        Value: DataGenerator
      UserData:
        Fn::Base64: !Sub |
          #include
          https://s3.amazonaws.com/anhyobin-analytics/code/userdata.sh
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: SSH-SecurityGroup
  EC2Profile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles: [!Ref 'EC2Role']
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
      - PolicyName: "LambdaBasicRole"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Action:
            - "logs:*"
            - "firehose:*"
            - "s3:*"
            Effect: "Allow"
            Resource: "*"
      RoleName: LambdaTransRole
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "ec2.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Policies:
      - PolicyName: "EC2ServiceRole"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Action:
            - "firehose:*"
            - "logs:*"
            - "sns:*"
            - "cloudwatch:*"
            Effect: "Allow"
            Resource: "*"
          - Effect: "Allow"
            Action: "iam:CreateServiceLinkedRole"
            Resource: "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*"
            Condition:
              StringLike:
                iam:AWSServiceName: "events.amazonaws.com"
      RoleName: EC2FirehoseRole
  GlueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "glue.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
      - PolicyName: "GlueServiceRole"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Action:
            - "s3:*"
            - "ec2:*"
            - "iam:*"
            - "glue:*"
            - "logs:*"
            Effect: "Allow"
            Resource: "*"
      RoleName: GlueAnalyticsRole
  LambaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import base64
          import string

          def lambda_handler(event, context):
            output = []

            for record in event['records']:
              payload = base64.b64decode(record['data'])

              # Replace 'Ship Mode' to 'Shipping Option'
              newPayload = string.replace(payload, 'Ship Mode', 'Shipping Option')
              print(newPayload)

              # Record Payload
              output_record = {
                'recordId': record['recordId'],
                'result': 'Ok',
                'data': base64.b64encode(newPayload)
              }
              output.append(output_record)

            print('Successfully processed {} records.'.format(len(event['records'])))
            return {'records': output}
      FunctionName: dataTransformation


      Handler: index.lambda_handler
      Runtime: python2.7
      Timeout: 60
      Role: !GetAtt [LambdaRole, "Arn"]
Outputs:
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
  AccessKey:
    Description: Access Key of the newly created IAM User
    Value: !Ref IAMUserAccessKey
  SecretKey:
    Description: Secret Access Key of the newly created IAM User
    Value: !GetAtt IAMUserAccessKey.SecretAccessKey
